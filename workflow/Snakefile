import logging
import math
from snakemake.io import expand, glob_wildcards

LOGGER = logging.getLogger("snakemake.logging")

if not "REPROFLOW_BASEDIR" in dir():
    # NOTE when used from a module workflow.basedir (and main_snakefile) always point to most-outer wrapping layer, workflow.
    # current_basedir (and snakefile) to the current module
    REPROFLOW_BASEDIR = workflow.current_basedir
    # print(REPROFLOW_BASEDIR)
LOGGER.info("REPROFLOW_BASEDIR = %s",REPROFLOW_BASEDIR)

configfile: "config/config.yaml"


SAMPLES = config["replicate"]["samples"]
selected_tools = config["alignment"]["selected_tools"]
TOOLS = selected_tools
# print(f'selected tools are : {TOOLS}')

############### HELPER FUNCTIONS #################
def _limit_number_of_replicates(info) -> int:
     number = min(
         config["replicate"]["replicate_number"],
         math.factorial(info) - 1,
     )
     return number


narr = _limit_number_of_replicates(config["replicate"]["record_len"]) + 1


if config["replicate"]["pair_type"] == "paired":

    include: "rules/create_replicates_paired.smk"

if config["replicate"]["pair_type"] == "single":

    include: "rules/create_replicates_single.smk"

if "bwa2" in selected_tools:

    include: "rules/bwa-mem2.smk"

if "bowtie2" in selected_tools:
    include: "rules/bowtie2.smk"

if "minimap2" in selected_tools:
    include: "rules/minimap2.smk"

if "minimap2" in selected_tools:
    include: "rules/nextgenmap.smk"

if "hisat2" in selected_tools:
    include: "rules/hisat2.smk"

if "snap" in selected_tools:
    print("SNAP selected")
    include: "rules/snap.smk"

if "subread" in selected_tools:
    include: "rules/subread.smk"

if "smalt" in selected_tools:
    include: "rules/smalt.smk"

include: "rules/parser_bam.smk"
include: "rules/comparer_bam.smk"



# print(range(1,narr))


def gather_checkpoint_outputs_paired(wildcards):
    # print(
    #     "check_out_paired: ",
    #     checkpoints.create_replicates_paired.get(**wildcards).output[0],
    #     checkpoints.create_replicates_paired.get(**wildcards).output[1],
    # )

    return [
        checkpoints.create_replicates_paired.get(**wildcards).output[0],
        checkpoints.create_replicates_paired.get(**wildcards).output[1],
     ]

def gather_checkpoint_outputs_single(wildcards):
    # print(
    #     "check_out_single: ",
    #     checkpoints.create_replicates_single.get(**wildcards).output[0],
    # )
    return checkpoints.create_replicates_single.get(**wildcards).output[0]


ext = ".fastq"


# def get_input():
#
#     paths = []  # Initialize an empty list to store all paths
#
#     if config["replicate"]["pair_type"] == "paired":
#
#         if config["replicate"]["replicate_type"] == "sh":
#             paths += expand(
#                 config["replicate"]["output_folder"] + "seed_{seed}/"
#                 + "{sample}_sh{n}_{end}" + ext,
#                 sample=SAMPLES,
#                 n=range(1,narr),
#                 seed=config["replicate"]["seed"],
#                 end=[1, 2]
#             )
#
#         elif config["replicate"]["replicate_type"] == "rc":
#             paths += expand(
#                 config["replicate"]["output_folder"] + "seed_{seed}/"
#                 + "{sample}_rc_{end}" + ext,
#                 sample=SAMPLES,
#                 seed=config["replicate"]["seed"],
#                 end=[1, 2]
#             )
#
#         elif config["replicate"]["replicate_type"] == "both":
#             paths += expand(
#                 config["replicate"]["output_folder"] + "seed_{seed}/"
#                 + "{sample}_both{n}_{end}" + ext,
#                 sample=SAMPLES,
#                 n=range(1,narr),
#                 seed=config["replicate"]["seed"],
#                 end=[1, 2]
#             )
#
#     if config["replicate"]["pair_type"] == "single":
#         if config["replicate"]["replicate_type"] == "sh":
#             paths += expand(
#                 config["replicate"]["output_folder"] + "seed_{seed}/"
#                 + "{sample}_sh{n}" + ext,
#                 sample=SAMPLES,
#                 n=range(1,narr),
#                 seed=config["replicate"]["seed"],
#             )
#
#         elif config["replicate"]["replicate_type"] == "rc":
#             paths += expand(
#                 config["replicate"]["output_folder"] + "seed_{seed}/"
#                 + "{sample}_rc" + ext,
#                 sample=SAMPLES,
#                 seed=config["replicate"]["seed"],
#             )
#
#         elif config["replicate"]["replicate_type"] == "both":
#             paths += expand(
#                 config["replicate"]["output_folder"] + "seed_{seed}/"
#                 + "{sample}_both{n}" + ext,
#                 sample=SAMPLES,
#                 n=range(1,narr),
#                 seed=config["replicate"]["seed"],
#             )
#
#     return paths


def get_input():

    paths = []  # Initialize an empty list to store all paths

    if config["replicate"]["pair_type"] == "paired":

        paths += expand(
            config["replicate"]["output_folder"] + "seed_{seed}/"
            + "{sample}_sh{n}_{end}" + ext,
            sample=SAMPLES,
            n=range(1,narr),
            seed=config["replicate"]["seed"],
            end=[1, 2]
        )

        paths += expand(
            config["replicate"]["output_folder"] + "seed_{seed}/"
            + "{sample}_rc_{end}" + ext,
            sample=SAMPLES,
            seed=config["replicate"]["seed"],
            end=[1, 2]
        )

        paths += expand(
            config["replicate"]["output_folder"] + "seed_{seed}/"
            + "{sample}_both{n}_{end}" + ext,
            sample=SAMPLES,
            n=range(1,narr),
            seed=config["replicate"]["seed"],
            end=[1, 2]
        )

    # if config["replicate"]["pair_type"] == "single":
    #     if config["replicate"]["replicate_type"] == "sh":
    #         paths += expand(
    #             config["replicate"]["output_folder"] + "seed_{seed}/"
    #             + "{sample}_sh{n}" + ext,
    #             sample=SAMPLES,
    #             n=range(1,narr),
    #             seed=config["replicate"]["seed"],
    #         )
    #
    #     elif config["replicate"]["replicate_type"] == "rc":
    #         paths += expand(
    #             config["replicate"]["output_folder"] + "seed_{seed}/"
    #             + "{sample}_rc" + ext,
    #             sample=SAMPLES,
    #             seed=config["replicate"]["seed"],
    #         )
    #
    #     elif config["replicate"]["replicate_type"] == "both":
    #         paths += expand(
    #             config["replicate"]["output_folder"] + "seed_{seed}/"
    #             + "{sample}_both{n}" + ext,
    #             sample=SAMPLES,
    #             n=range(1,narr),
    #             seed=config["replicate"]["seed"],
    #         )

    return paths



ext = ".bam"

def get_input_files(ext=".bam"):
    files = []  # Initialize an empty list to store all paths

    for tool in TOOLS:  # Iterate over each tool
        tool_out_folder = config["alignment"]["output_folder"] + f"{tool}/"  # Dynamically include the tool in the path

        if config["replicate"]["pair_type"] == "paired":
            # files += expand(
            #     tool_out_folder
            #     + "seed_{seed}/" + f"{ext.split('.')[1]}/"
            #     + "{sample}_{rtype}{n}"
            #     + ext,
            #     sample=SAMPLES,
            #     n=range(1, narr),
            #     rtype=['sh', 'both'],
            #     seed=config["replicate"]["seed"],
            # )
            #
            # files += expand(
            #     tool_out_folder
            #     + "seed_{seed}/" + f"{ext.split('.')[1]}/"
            #     + "{sample}_{rtype}"
            #     + ext,
            #     sample=SAMPLES,
            #     n=range(1, narr),
            #     rtype='rc',
            #     seed=config["replicate"]["seed"],
            # )

            files += expand(
                tool_out_folder
                + "seed_{seed}/" + f"{ext.split('.')[1]}/"
                + "{sample}_o"
                + ext,
                sample=SAMPLES,
                seed=config["replicate"]["seed"],
            )

        else:
            files += expand(
                tool_out_folder
                + "seed_{seed}/" + f"{ext.split('.')[1]}/"
                + "{sample}_{rtype}{n}"
                + ext,
                sample=SAMPLES,
                n=range(1, narr),
                rtype=['sh', 'both'],
                seed=config["replicate"]["seed"],
            )

            files += expand(
                tool_out_folder
                + "seed_{seed}/" + f"{ext.split('.')[1]}/"
                + "{sample}_{rtype}"
                + ext,
                sample=SAMPLES,
                n=range(1, narr),
                rtype='rc',
                seed=config["replicate"]["seed"],
            )

            files += expand(
                tool_out_folder
                + "seed_{seed}/" + f"{ext.split('.')[1]}/"
                + "{sample}_o"
                + ext,
                sample=SAMPLES,
                seed=config["replicate"]["seed"],
            )

    return files



ext = '.csv'
def get_parsed_csvs():
    files = []  # Initialize an empty list to store all paths

    if config["replicate"]["pair_type"] == "paired":


        files += expand(
            out_folder
            + "seed_{seed}/" + "csv/"
            + "{sample}_{rtype}{n}"
            + ext,
            sample=SAMPLES,
            tool=TOOLS,
            n=range(1,narr),
            rtype=['sh', 'both'],
            seed=config["replicate"]["seed"],

        )

        files += expand(
            out_folder
            + "seed_{seed}/" + "csv/"
            + "{sample}_{rtype}"
            + ext,
            sample=SAMPLES,
            tool=TOOLS,
            n=range(1,narr),
            rtype='rc',
            seed=config["replicate"]["seed"],

        )

        files += expand(
            out_folder
            + "seed_{seed}/" + "csv/"
            + "{sample}_o"
            + ext,
            sample=SAMPLES,
            tool=TOOLS,
            seed=config["replicate"]["seed"]
        )


    else:

        files += expand(
            out_folder
            + "seed_{seed}/" + "csv/"
            + "{sample}_{rtype}{n}"
            + ext,
            sample=SAMPLES,
            tool=TOOLS,
            n=range(1,narr),
            rtype=['sh', 'both'],
            seed=config["replicate"]["seed"],

        )

        files += expand(
            out_folder
            + "seed_{seed}/" + "csv/"
            + "{sample}_{rtype}"
            + ext,
            sample=SAMPLES,
            tool=TOOLS,
            n=range(1,narr),
            rtype='rc',
            seed=config["replicate"]["seed"],

        )

        files += expand(
            out_folder
            + "seed_{seed}/" + "csv/"
            + "{sample}_o"
            + ext,
            sample=SAMPLES,
            tool=TOOLS,
            seed=config["replicate"]["seed"]
        )

    return files


out_folder = config["assessment"]["comparer_out"] + "bwa2/"



ext = '.txt'
def get_comp():
    files = []  # Initialize an empty list to store all paths

    for tool in TOOLS:  # Iterate over each tool
        tool_out_folder = config["assessment"]["comparer_out"] + f"{tool}/"

        if config["replicate"]["pair_type"] == "paired":


            files += expand(
                tool_out_folder
                + "seed_{seed}/" + "done/"
                + "{sample}_o_{rtype}{n}"
                + ext,
                sample=SAMPLES,
                tool=TOOLS,
                n=range(1,narr),
                rtype=['sh', 'both'],
                seed=config["replicate"]["seed"],

            )

            files += expand(
                tool_out_folder
                + "seed_{seed}/" + "done/"
                + "{sample}_o_{rtype}"
                + ext,
                sample=SAMPLES,
                tool=TOOLS,
                n=range(1,narr),
                rtype='rc',
                seed=config["replicate"]["seed"],

            )


        else:

            files += expand(
                tool_out_folder
                + "seed_{seed}/" + "done/"
                + "{sample}_o_{rtype}{n}"
                + ext,
                sample=SAMPLES,
                tool=TOOLS,
                n=range(1,narr),
                rtype=['sh', 'both'],
                seed=config["replicate"]["seed"],

            )

            files += expand(
                tool_out_folder
                + "seed_{seed}/" + "done/"
                + "{sample}_o_{rtype}"
                + ext,
                sample=SAMPLES,
                tool=TOOLS,
                n=range(1,narr),
                rtype='rc',
                seed=config["replicate"]["seed"],

            )


    return files


print(f'expected outputs: {get_input_files(ext=".bam")}')

# print(f'expected outputs: {get_comp()}')


rule all:
    input:
        "/Users/peicer/projects/github_releases/reproducibility/resources/index2/Genome",
        "/Users/peicer/projects/github_releases/reproducibility/resources/index2/GenomeIndex",
        "/Users/peicer/projects/github_releases/reproducibility/resources/index2/GenomeIndexHash",
        "/Users/peicer/projects/github_releases/reproducibility/resources/index2/OverflowTable"
        # get_input_files()



# rule all:
#     input:
#         get_comp()

# rule all:
#     input:
#         get_input_files(ext=".bam")


# rule all:
#     input:
#
#         lambda wildcards: [
#             gather_checkpoint_outputs_single({"sample": sample, "seed": seed})
#             for sample in SAMPLES
#             for seed in [config["replicate"]["seed"]]
#         ]


# rule all:
#     input:
#         "../work/replicates/seed_1/ERR009308_sh1_1.fastq"  # Replace with your actual test paths
#         "../work/replicates/1/ERR009308_sh1_2.fastq",
#         "../work/replicates/1/ERR009308_sh2_1.fastq",
#         "../work/replicates/1/ERR009308_sh2_2.fastq"

