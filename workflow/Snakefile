import logging
import math
from snakemake.io import expand, glob_wildcards

LOGGER = logging.getLogger("snakemake.logging")

if not "REPROFLOW_BASEDIR" in dir():
    # NOTE when used from a module workflow.basedir (and main_snakefile) always point to most-outer wrapping layer, workflow.
    # current_basedir (and snakefile) to the current module
    REPROFLOW_BASEDIR = workflow.current_basedir
    # print(REPROFLOW_BASEDIR)
LOGGER.info("REPROFLOW_BASEDIR = %s",REPROFLOW_BASEDIR)

configfile: "config/config.yaml"


SAMPLES = config["replicate"]["samples"]
print(SAMPLES)

############### HELPER FUNCTIONS #################
def _limit_number_of_replicates(info) -> int:
     number = min(
         config["replicate"]["replicate_number"],
         math.factorial(info) - 1,
     )
     return number


narr = _limit_number_of_replicates(config["replicate"]["record_len"]) + 1


if config["replicate"]["pair_type"] == "paired":

    include: "rules/create_replicates_paired.smk"

if config["replicate"]["pair_type"] == "single":

    include: "rules/create_replicates_single.smk"



# print(range(1,narr))


def gather_checkpoint_outputs_paired(wildcards):
    print(
        "check_out_paired: ",
        checkpoints.create_replicates_paired.get(**wildcards).output[0],
        checkpoints.create_replicates_paired.get(**wildcards).output[1],
    )

    return [
        checkpoints.create_replicates_paired.get(**wildcards).output[0],
        checkpoints.create_replicates_paired.get(**wildcards).output[1],
     ]

def gather_checkpoint_outputs_single(wildcards):
    print(
        "check_out_single: ",
        checkpoints.create_replicates_single.get(**wildcards).output[0],
    )
    return checkpoints.create_replicates_single.get(**wildcards).output[0]


ext = ".fastq"


def get_input():

    paths = []  # Initialize an empty list to store all paths

    if config["replicate"]["pair_type"] == "paired":

        if config["replicate"]["replicate_type"] == "sh":
            paths += expand(
                config["replicate"]["output_folder"] + "seed_{seed}/"
                + "{sample}_sh{n}_{end}" + ext,
                sample=SAMPLES,
                n=range(1,narr),
                seed=config["replicate"]["seed"],
                end=[1, 2]
            )

        elif config["replicate"]["replicate_type"] == "rc":
            paths += expand(
                config["replicate"]["output_folder"] + "seed_{seed}/"
                + "{sample}_rc_{end}" + ext,
                sample=SAMPLES,
                seed=config["replicate"]["seed"],
                end=[1, 2]
            )

        elif config["replicate"]["replicate_type"] == "both":
            paths += expand(
                config["replicate"]["output_folder"] + "seed_{seed}/"
                + "{sample}_both{n}_{end}" + ext,
                sample=SAMPLES,
                n=range(1,narr),
                seed=config["replicate"]["seed"],
                end=[1, 2]
            )

    if config["replicate"]["pair_type"] == "single":
        if config["replicate"]["replicate_type"] == "sh":
            paths += expand(
                config["replicate"]["output_folder"] + "seed_{seed}/"
                + "{sample}_sh{n}" + ext,
                sample=SAMPLES,
                n=range(1,narr),
                seed=config["replicate"]["seed"],
            )

        elif config["replicate"]["replicate_type"] == "rc":
            paths += expand(
                config["replicate"]["output_folder"] + "seed_{seed}/"
                + "{sample}_rc" + ext,
                sample=SAMPLES,
                seed=config["replicate"]["seed"],
            )

        elif config["replicate"]["replicate_type"] == "both":
            paths += expand(
                config["replicate"]["output_folder"] + "seed_{seed}/"
                + "{sample}_both{n}" + ext,
                sample=SAMPLES,
                n=range(1,narr),
                seed=config["replicate"]["seed"],
            )

    return paths


print(get_input())


rule all:
    input:
        get_input()
#         gather_checkpoint_outputs_single()

# rule all:
#     input:
#
#         lambda wildcards: [
#             gather_checkpoint_outputs_single({"sample": sample, "seed": seed})
#             for sample in SAMPLES
#             for seed in [config["replicate"]["seed"]]
#         ]


# rule all:
#     input:
#         "../work/replicates/seed_1/ERR009308_sh1_1.fastq"  # Replace with your actual test paths
#         # "../work/replicates/1/ERR009308_sh1_2.fastq",
#         # "../work/replicates/1/ERR009308_sh2_1.fastq",
#         # "../work/replicates/1/ERR009308_sh2_2.fastq"

