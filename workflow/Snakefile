
import logging
import glob

LOGGER = logging.getLogger("snakemake.logging")

if not "REPROFLOW_BASEDIR" in dir():
    # NOTE when used from a module workflow.basedir (and main_snakefile) always point to most-outer wrapping layer, workflow.current_basedir (and snakefile) to the current module
    REPROFLOW_BASEDIR = workflow.current_basedir
LOGGER.info("REPROFLOW_BASEDIR = %s", REPROFLOW_BASEDIR)

# include: "rules/create_replicates.smk"

configfile: "../config/config.yaml"

SAMPLES = ["test_g"]


def fastq_file_names(wildcards):
    rep_type = config["replicate"]["replicate_type"]
    n = config["replicate"]["replicate_number"]
    out_folder = config["replicate"]["output_folder"]

    files = []
    if rep_type == "rc":
        files.extend(
            expand(
                out_folder + "{sample}_rc_{end}.fastq",
                sample=SAMPLES,
                end=[1,2]
            )

        )
    elif rep_type == "sh":
        files.extend(
            expand(
                out_folder + "{sample}_sh{i}_{end}.fastq",
                sample=SAMPLES,
                i=range(1, n + 1),
                end=[1,2]
            )
        )
    return files


def aggregate_replicates(wildcards):
    # Get the list of expected replicate file names
    expected_files = fastq_file_names(wildcards)

    # Find existing files in the output folder
    out_folder = config["replicate"]["output_folder"]
    existing_files = glob.glob(out_folder + "*.fastq")

    # Determine which files need to be created
    files_to_create = [f for f in expected_files if f not in existing_files]

    return files_to_create

rule all:
    input:
        aggregate_replicates

checkpoint create_replicates:
    input:
        input1=config["replicate"]["input_folder"] + "{sample}_1.fastq",
        input2=config["replicate"]["input_folder"] + "{sample}_2.fastq",

    output:
        out1=config["replicate"]["output_folder"] + "{sample}_sh{n}_1.fastq"\
                if config["replicate"]["replicate_type"] == "sh"\
                else config["replicate"]["output_folder"] + "{sample}_rc_1.fastq",

        out2=config["replicate"]["output_folder"] + "{sample}_sh{n}_2.fastq"\
                if config["replicate"]["replicate_type"] == "sh"\
                else config["replicate"]["output_folder"] + "{sample}_rc_2.fastq",
    params:
        out_folder=config["replicate"]["output_folder"],
        rep_type=config["replicate"]["replicate_type"],
        rep_num=config["replicate"]["replicate_number"],
        pair_type=config["replicate"]["pair_type"],
    conda:
        f"{REPROFLOW_BASEDIR}/envs/replicate.yaml"

    shell:
        """
        python {REPROFLOW_BASEDIR}/scripts/create_replicates.py \
            -f1 {input.input1} \
            -f2 {input.input2} \
            -r {params.rep_type} \
            -n {params.rep_num} \
            -p {params.pair_type} \
            -o {params.out_folder}
        """
